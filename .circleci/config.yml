version: 2.1

orbs:
  win: circleci/windows@2.2.0

commands:
  setup-conda-linux:
    steps:
      - run:
          name: Install Miniconda
          command: |
            MINICONDA_URL="https://repo.continuum.io/miniconda/"
            MINICONDA_FILE="Miniconda3-latest-Linux-x86_64.sh"
            curl -L -O "${MINICONDA_URL}/${MINICONDA_FILE}"
            bash "$MINICONDA_FILE" -b -f -p ~/miniconda3
            rm "${MINICONDA_FILE}"
            eval "$(~/miniconda3/bin/conda shell.bash hook)"
            conda init
      - run:
          name: Setup Miniconda
          command: |
            conda create -y -c rdkit -n test python=3.7.3 rdkit=2020.03
            conda activate test
  setup-conda-windows:
    steps:
      - run:
          name: Setup Miniconda
          command: |
            conda create -y -c rdkit -n test python=3.7.3 rdkit=2020.03
            conda init powershell
            conda activate test
  install-python-deps:
    steps:
      - run:
          name: Install Python Dependencies
          command: |
            pip install -r requirements.txt
  run-unit-tests:
    steps:
      - run:
          name: Run Unit Tests
          command: |
            Set-StrictMode -Version Latest
            $ErrorActionPreference = 'Stop'
            function ThrowOnFailure($Msg) { if (-not $?) { throw $Msg } }
            
            pytest --disable-warnings --junitxml=~/reports/test-results.xml
            ThrowOnFailure "Python test failed!"
            flake8 --max-line-length=120 --ignore=PT009,E203,W503,W601

jobs:
  linux-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup-conda-linux
      - restore_cache:
          key: linux-deps-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - install-python-deps
      - save_cache:
          key: linux-deps-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run-unit-tests
  win-test:
    executor: win/default
    steps:
      - checkout
      - setup-conda-windows
      - restore_cache:
          key: win-deps-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - install-python-deps
      - save_cache:
          key: win-deps-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run-unit-tests

  # Linux integration 
  Integration-on-linux:
    executor: python/default
    steps:
      - checkout
      - run:
          name: Install Python dependencies and postgresql installation
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
            sudo apt install -y postgresql-client || true
            sudo apt install postgresql

      - run:
          name: Integrate IsaTAB.sql into the database
          command: |
            psql -c "create database Isatab_DB" -U postgres -h localhost -p 5432
            psql -f AutoFlow-OmicsDataHandling/IsaTab.sql Isatab_DB

  # Windows integration
  Integration-on-windows:
    executor:
      name: win/default
      shell: powershell.exe

    steps:
      - checkout
      - run:
          name: Install postgresql
          command : |
            choco install postgresql
            python -m pip install -U pip

      - run:
          name: Install Python Dependencies
          command : |
            pip install -r requirements.txt

      - run:
          name : Integrate IsaTAB.sql into the database
          command: |
            psql -c "create database Isatab_DB" -U postgres -h localhost -p 5432
            psql -h localhost -U biosustain -d biosustaindb -f AutoFlow-OmicsDataHandling/IsaTab.sql
              
  # MacOS integration
  Integration-on-macos:
    macos:
      xcode: 11.3.0
    steps:
      - checkout
      - run:
          name: Install PostgresSQL

          environment:
            POSTGRES_USER: circleCI
            POSTGRES_DB: circleCI_test

          command: |
            brew install postgresql

      - run:
          name: Integrate IsaTAB.sql into the database
          command: |
            psql -c "create database Isatab_DB" -U postgres -h localhost -p 5432
            psql -f AutoFlow-OmicsDataHandling/IsaTab.sql Isatab_DB

workflows:
  main:
    jobs:
      - linux-test
      - win-test
      #- Integration-on-linux
      #- Integration-on-windows
      #- Integration-on-macos
